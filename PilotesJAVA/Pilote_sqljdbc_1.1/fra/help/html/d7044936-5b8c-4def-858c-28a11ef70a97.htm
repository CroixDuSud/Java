<html DIR="LTR" xmlns:tool="http://www.microsoft.com/tooltip" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1252" />
    <META NAME="save" CONTENT="history" />
    <title>Utilisation des types de données de base</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/script_loc.js">
      
    </script>
    <script src="../local/script_main.js">
      
    </script>
  </head>
  <body style="display: none;">
    <!--Topic built:11/3/2006-->
<input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <div id="header">
        <tr>
          <td align="left">
            <span id="headerBold">Utilisation des types de données de base</span>
          </td>
        </tr>
      </table>
      <IMG id="SeeAlso1" style="display:none; height:0; width:0;" src="../local/SeeAlso1a.gif">
        
      </IMG>
      <IMG id="SeeAlso2" style="display:none; height:0; width:0;" src="../local/SeeAlso1c.gif">
        
      </IMG>
      <IMG id="Filter1" style="display:none; height:0; width:0;" src="../local/Filter1a.gif">
        
      </IMG>
      <IMG id="Filter2" style="display:none; height:0; width:0;" src="../local/Filter1c.gif">
        
      </IMG>
      <span style="display:none" id="languageSpan">
        <h1 class="heading">
          Langage
        </h1>
        <div id="selectLanguage" class="section">
          <div class="languageFilter" id="VisualBasic" onclick="ChangeLanguage(this.id)" onkeypress="ChangeLanguage_CheckKey(this.id)" tabindex="0">
            [Visual Basic]
          </div>
          <div class="languageFilter" id="CSharp" onclick="ChangeLanguage(this.id)" onkeypress="ChangeLanguage_CheckKey(this.id)" tabindex="0">
            [C#]
          </div>
          <div class="languageFilter" id="ManagedCPlusPlus" onclick="ChangeLanguage(this.id)" onkeypress="ChangeLanguage_CheckKey(this.id)" tabindex="0">
            [C++]
          </div>
          <div class="languageFilter" id="JSharp" onclick="ChangeLanguage(this.id)" onkeypress="ChangeLanguage_CheckKey(this.id)" tabindex="0">
            [J#]
          </div>
          <div class="languageFilter" id="JScript" onclick="ChangeLanguage(this.id)" onkeypress="ChangeLanguage_CheckKey(this.id)" tabindex="0">
            [JScript]
          </div>
          <div class="languageFilter" id="all" onclick="ChangeLanguage(this.id)" onkeypress="ChangeLanguage_CheckKey(this.id)" tabindex="0">
            (Afficher tout)
          </div>
        </div>
      </span>
    </div>
    <div id="mainSection">
      <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
      </div>
      <font color="DarkGray"><!-- [This topic is pre-release documentation and is subject to change in future releases. Blank topics are included as placeholders.]<br/>[Documentation built on 11/3/2006]  --></font><p /><p />
      <div id="introductionSection" class="section">
    <p>Les types de données de base de JDBC sont ceux présentés dans l'API principale de JDBC 1.0. Le pilote JDBC de Microsoft de SQL Server 2005 utilise les types de données de base de JDBC pour convertir les types de données SQL Server en un format compréhensible par le langage de programmation Java et inversement.</p>
    <p>Le tableau suivant répertorie les mappages par défaut entre les types de données de base SQL Server, JDBC et du langage de programmation Java :</p>
    <h2 class="heading"></h2><table cellspacing="0" cellpadding="0" border="1" style="background-color: #CCCCCC;"><tr>
          <th>
            Types SQL Server
          </th>
          <th>
            Types JDBC (java.sql.Types)
          </th>
          <th>
            Types langage Java
          </th>
        </tr><tr>
        <td>
          <p>bigint</p>
        </td>
        <td>
          <p>BIGINT</p>
        </td>
        <td>
          <p>long</p>
        </td>
      </tr><tr>
        <td>
          <p>timestamp</p>
          <p>binary</p>
        </td>
        <td>
          <p>BINARY</p>
        </td>
        <td>
          <p>byte[]</p>
        </td>
      </tr><tr>
        <td>
          <p>bit</p>
        </td>
        <td>
          <p>BIT</p>
        </td>
        <td>
          <p>Boolean</p>
        </td>
      </tr><tr>
        <td>
          <p>char</p>
          <p>nchar</p>
        </td>
        <td>
          <p>CHAR</p>
        </td>
        <td>
          <p>String</p>
        </td>
      </tr><tr>
        <td>
          <p>decimal</p>
          <p>money</p>
          <p>smallmoney</p>
        </td>
        <td>
          <p>DECIMAL</p>
        </td>
        <td>
          <p>java.math.BigDecimal</p>
        </td>
      </tr><tr>
        <td>
          <p>float</p>
        </td>
        <td>
          <p>DOUBLE</p>
        </td>
        <td>
          <p>double</p>
        </td>
      </tr><tr>
        <td>
          <p>int</p>
        </td>
        <td>
          <p>INTEGER</p>
        </td>
        <td>
          <p>int</p>
        </td>
      </tr><tr>
        <td>
          <p>image</p>
        </td>
        <td>
          <p>LONGVARBINARY</p>
        </td>
        <td>
          <p>byte[]</p>
        </td>
      </tr><tr>
        <td>
          <p>text</p>
          <p>ntext</p>
        </td>
        <td>
          <p>LONGVARCHAR</p>
        </td>
        <td>
          <p>String</p>
        </td>
      </tr><tr>
        <td>
          <p>numeric</p>
        </td>
        <td>
          <p>NUMERIC</p>
        </td>
        <td>
          <p>java.math.BigDecimal</p>
        </td>
      </tr><tr>
        <td>
          <p>real</p>
        </td>
        <td>
          <p>REAL</p>
        </td>
        <td>
          <p>float</p>
        </td>
      </tr><tr>
        <td>
          <p>smallint</p>
          <p>tinyint</p>
        </td>
        <td>
          <p>SMALLINT</p>
        </td>
        <td>
          <p>short</p>
        </td>
      </tr><tr>
        <td>
          <p>datetime</p>
          <p>smalldatetime</p>
        </td>
        <td>
          <p>TIMESTAMP</p>
        </td>
        <td>
          <p>java.sql.Timestamp</p>
        </td>
      </tr><tr>
        <td>
          <p>varbinary</p>
        </td>
        <td>
          <p>VARBINARY</p>
        </td>
        <td>
          <p>byte[]</p>
        </td>
      </tr><tr>
        <td>
          <p>varchar</p>
          <p>nvarchar</p>
        </td>
        <td>
          <p>VARCHAR</p>
        </td>
        <td>
          <p>String</p>
        </td>
      </tr><tr>
        <td>
          <p>uniqueidentifier</p>
        </td>
        <td>
          <p>CHAR</p>
        </td>
        <td>
          <p>String</p>
        </td>
      </tr></table>
    <div style="margin: .5em 1.5em .5em 1.5em"><b>Remarque : </b>
      Actuellement, le pilote JDBC ne prend pas en charge le type de données SQL Server sqlvariant. Si une requête est utilisée pour extraire des données d'une table contenant une colonne du type de données sqlvariant, une exception se produit.<p></p>
    </div>
    <p>Les sections suivantes proposent des exemples d'utilisation du pilote JDBC et des types de données de base. Pour des exemples plus détaillés sur l'utilisation des types de données de base dans une application Java, voir <a href="59ac80cf-fc66-4493-933d-38e479c5f54d.htm">Exemple de types de données de base</a>.</p>
  </div>
      <h1 class="heading">Extraction de données en tant que chaîne</h1>
      <div id="sectionSection" class="section">
        <content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">Si vous devez extraire des données d'une source de données qui correspond à l'un des types de données de base de JDBC pour les afficher en tant que chaîne, ou si le type des données n'est pas absolument requis, vous pouvez appliquer la méthode <a href="f81dde01-d328-4b32-8871-1efac645b68e.htm">getString</a> de la classe <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a>, comme suit :</p>
      <div class="sampleCode" xmlns="">
		<span class="langLabel" name="label"></span><span codeLanguage="other"><pre>String SQL = "SELECT TOP 10 * FROM Person.Contact";
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery(SQL);

while (rs.next()) {
   System.out.println(rs.getString(4) + " " + rs.getString(6));
}
rs.close();
stmt.close();
</pre></span>
	</div>
    </content>
      </div>
      <h1 class="heading">Extraction de données par type de données</h1>
      <div id="sectionSection" class="section">
        <content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">Si vous devez extraire des données d'une source de données et que vous connaissez le type de données extraites, vous devez utiliser l'une des méthodes <b>get&lt;Type&gt;</b> de la classe <b>SQLServerResultSet</b>, également connues comme méthodes getter. Vous pouvez utiliser soit un nom de colonne, soit un index de colonne avec les méthodes <b>get&lt;Type&gt;</b>, comme suit :</p>
      <div class="sampleCode" xmlns="">
		<span class="langLabel" name="label"></span><span codeLanguage="other"><pre>ResultSet rs = stmt.executeQuery("SELECT lname, job_id FROM employee
   WHERE (lname = 'Brown')");
rs.next();
short empJobID = rs.getShort("job_id");
rs.close();
stmt.close();
</pre></span>
	</div>
      <div style="margin: .5em 1.5em .5em 1.5em" xmlns=""><b>Remarque : </b>
        Le pilote JDBC désapprouve et ne prend pas en charge les méthodes <b>getUnicodeStream</b> et <b>getBigDecimal</b> avec échelle.<p></p>
      </div>
    </content>
      </div>
      <h1 class="heading">Mise à jour des données par type de données</h1>
      <div id="sectionSection" class="section">
        <content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">Si vous devez mettre à jour la valeur d'un champ dans une source de données, vous devez utiliser l'une des méthodes <b>update&lt;Type&gt;</b> de la classe <b>SQLServerResultSet</b>. Dans l'exemple suivant, la méthode <a href="2bb0319e-12cb-4604-a7e3-b22a24b02296.htm">updateInt</a> est appliquée conjointement avec la méthode <a href="cfced0ca-a281-40dc-8d2f-370d5f0bf12b.htm">updateRow</a> pour mettre à jour les données dans la source de données :</p>
      <div class="sampleCode" xmlns="">
		<span class="langLabel" name="label"></span><span codeLanguage="other"><pre>Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); 
ResultSet rs = stmt.executeQuery("SELECT lname, job_id FROM employee
   WHERE (lname = 'Brown')");
rs.next();
short empJobID = rs.getInt(2);
empJobID++;
rs.first();
rs.updateInt(2, empJobID);
rs.updateRow();
rs.close();
stmt.close();
</pre></span>
	</div>
      <div style="margin: .5em 1.5em .5em 1.5em" xmlns=""><b>Remarque : </b>
        Le pilote JDBC ne peut pas mettre à jour une colonne SQL Server avec un nom de colonne contenant plus de 127 caractères. En cas de tentative de mise à jour d'une colonne dont le nom comporte plus de 127 caractères, une exception est générée.<p></p>
      </div>
    </content>
      </div>
      <h1 class="heading">Mise à jour des données par requête paramétrée</h1>
      <div id="sectionSection" class="section">
        <content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">Si vous devez mettre à jour des données dans une source de données en utilisant une requête paramétrée, vous pouvez définir le type de données des paramètres à l'aide de l'une des méthodes <b>set&lt;Type&gt;</b> de la classe <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a>, également connues comme méthodes setter. Dans l'exemple suivant, la méthode <a href="bd4e4085-f704-4a73-b6a7-7d443d564728.htm">prepareStatement</a> est utilisée pour précompiler la requête paramétrée, puis la méthode <a href="25dabdc9-c60f-485a-87eb-306067964765.htm">setString</a> est utilisée pour définir la valeur de chaîne du paramètre avant d'appeler la méthode <a href="ca534c6b-ef4d-4ae8-8cc3-514728623cff.htm">executeUpdate</a>.</p>
      <div class="sampleCode" xmlns="">
		<span class="langLabel" name="label"></span><span codeLanguage="other"><pre>PreparedStatement pstmt = con.prepareStatement("UPDATE employee SET
   fname = ? WHERE (lname = 'Brown')");
String first = "Bob";
pstmt.setString(1, first);
int rowCount = pstmt.executeUpdate();
pstmt.close();
</pre></span>
	</div>
      <p xmlns="">Pour plus d'informations sur les requêtes paramétrées, voir <a href="3202b88f-ce13-44dd-982c-c6a3b0260378.htm">Utilisation d'une instruction SQL avec paramètres</a>.</p>
    </content>
      </div>
      <h1 class="heading">Transmission de paramètres à une procédure stockée</h1>
      <div id="sectionSection" class="section">
        <content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">Si vous devez transmettre des paramètres entrés dans une procédure stockée, vous pouvez définir les paramètres par index ou par nom à l'aide de l'une des méthodes <b>set&lt;Type&gt;</b> de la classe <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a>. Dans l'exemple suivant, la méthode <a href="265b024c-898a-4bd0-98b5-f06076717b9e.htm">prepareCall</a> est utilisée pour configurer l'appel de la procédure stockée, puis la méthode <a href="f38b97b5-d4f0-4f74-a33d-740241a85842.htm">setString</a> est utilisée pour définir le paramètre de l'appel avant l'appel de la méthode <a href="599cf463-e19f-4baa-bacb-513cad7c6cd8.htm">executeQuery</a>.</p>
      <div class="sampleCode" xmlns="">
		<span class="langLabel" name="label"></span><span codeLanguage="other"><pre>CallableStatement cstmt = con.prepareCall("{call employee_jobid(?)}");
String lname = "Brown";
cstmt.setString(1, lname);
Resultset rs = cstmt.executeQuery();
rs.close();
cstmt.close();
</pre></span>
	</div>
      <div style="margin: .5em 1.5em .5em 1.5em" xmlns=""><b>Remarque : </b>
        Dans cet exemple, un jeu de résultats est retourné avec les résultats de l'exécution de la procédure stockée. <p></p>
      </div>
      <p xmlns="">Pour plus d'informations sur l'utilisation du pilote JDBC avec les procédures stockées et les paramètres d'entrée, voir <a href="8f491b70-7d1b-42bd-964f-9a8b86af5eaa.htm">Utilisation d'une procédure stockée avec des paramètres d'entrée</a>.</p>
    </content>
      </div>
      <h1 class="heading">Extraction de paramètres d'une procédure stockée</h1>
      <div id="sectionSection" class="section">
        <content xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <p xmlns="">Si vous devez extraire des paramètres d'une procédure stockée, vous devez tout d'abord enregistrer un paramètre OUT par nom ou index à l'aide de la méthode <a href="82f8d608-efc1-4af8-a985-ec25d19420aa.htm">registerOutParameter</a> de la classe <b>SQLServerCallableStatement</b>, puis attribuer le paramètre OUT retourné à une variable appropriée après l'exécution de l'appel de la procédure stockée. Dans l'exemple suivant, la méthode <b>prepareCall</b> est utilisée pour configurer l'appel de la procédure stockée, la méthode <b>registerOutParameter</b> est utilisée pour configurer le paramètre OUT, puis la méthode <a href="f38b97b5-d4f0-4f74-a33d-740241a85842.htm">setString</a> est utilisée pour définir le paramètre pour l'appel avant l'appel de la méthode <b>executeQuery</b>. La valeur retournée par le paramètre OUT de la procédure stockée est extraite à l'aide de la méthode <a href="9e3c51bc-7285-4f28-92c8-cfa05e49da9e.htm">getShort</a>.</p>
      <div class="sampleCode" xmlns="">
		<span class="langLabel" name="label"></span><span codeLanguage="other"><pre>CallableStatement cstmt = con.prepareCall("{call employee_jobid (?, ?)}");
Cstmt.registerOutParameter(2, java.sql.Types.SMALLINT);
String lname = "Brown";
cstmt.setString(1, lname);
Resultset rs = cstmt.executeQuery();
short empJobID = cstmt.getShort(2);
rs.close();
cstmt.close();
</pre></span>
	</div>
      <div style="margin: .5em 1.5em .5em 1.5em" xmlns=""><b>Remarque : </b>
        Outre le paramètre OUT retourné, un jeu de résultats peut également être retourné avec les résultats de l'exécution de la procédure stockée.<p></p>
      </div>
      <p xmlns="">Pour plus d'informations sur l'utilisation du pilote JDBC avec les procédures stockées et les paramètres de sortie, consultez <a href="1c006f27-7e99-43d5-974c-7b782659290c.htm">Utilisation d'une procédure stockée avec des paramètres de sortie</a>.</p>
    </content>
      </div>
      <span id="seeAlsoSpan">
        <h1 class="heading">
          Voir aussi
        </h1>
        <div id="seeAlsoSection" class="section">
          <a href="7802328d-4d23-4775-9573-4169b127d258.htm">Types de données du pilote JDBC</a>
        </div>
      </span>
      <!--[if gte IE 5]>
			<tool:tip element="seeAlsoToolTip" avoidmouse="false"/><tool:tip element="languageFilterToolTip" avoidmouse="false"/>
		<![endif]-->
      <div id="footer" class="section">
        <hr /><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span>
		<a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">
			
			© 2006 Microsoft Corporation. Tous droits réservés.
		</a>
 	
      </div>
    </div>
  </body>
</html>